legend.position = "none")
plot_wue <- ggplot(data = df_normalized, aes(x = date, y = wue, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized WUE",
size = 16) +
theme_minimal() +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_ctotal, plot_evapm, plot_wue, ncol = 2)
plot_wue <- ggplot(data = df_normalized, aes(x = date, y = wue, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized WUE",
size = 16) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_ctotal, plot_evapm, plot_wue, ncol = 2)
# Criar cada plot separadamente
plot_npp <- ggplot(data = df_normalized, aes(x = date, y = npp, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized NPP",
size = 16) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
plot_ctotal <- ggplot(data = df_normalized, aes(x = date, y = ctotal, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized Ctotal",
size = 16) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
plot_evapm <- ggplot(data = df_normalized, aes(x = date, y = evapm, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized Evapm",
size = 14) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
plot_wue <- ggplot(data = df_normalized, aes(x = date, y = wue, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized WUE",
size = 16) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_ctotal, plot_evapm, plot_wue, ncol = 2)
# Criar cada plot separadamente
plot_npp <- ggplot(data = df_normalized, aes(x = date, y = npp, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 16) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
plot_ctotal <- ggplot(data = df_normalized, aes(x = date, y = ctotal, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 16) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
plot_evapm <- ggplot(data = df_normalized, aes(x = date, y = evapm, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 14) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
plot_wue <- ggplot(data = df_normalized, aes(x = date, y = wue, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 16) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_ctotal, plot_evapm, plot_wue, ncol = 2)
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_evapm, plot_ctotal, plot_wue, ncol = 2)
library(gridExtra)
# Criar cada plot separadamente
plot_ls <- ggplot(data = df_combined, aes(x = date, y = ls, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "LS",
size = 20) +
theme_minimal() +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_ctotal, plot_evapm, plot_wue, plot_ls, ncol = 2)
# Criar cada plot separadamente
plot_ls <- ggplot(data = df_combined, aes(x = date, y = ls, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "",
size = 14) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_ctotal, plot_evapm, plot_wue, plot_ls, ncol = 2)
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_ctotal, plot_evapm, plot_wue, plot_ls, ncol = 3)
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_ctotal, plot_ls, plot_evapm, plot_wue, ncol = 3)
# Criar cada plot separadamente
plot_ls <- ggplot(data = df_combined, aes(x = date, y = ls, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Surviving strategies",
size = 14) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_ctotal, plot_ls, plot_evapm, plot_wue, ncol = 3)
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_evapm, plot_ctotal, plot_ls, plot_wue, ncol = 3)
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_evapm, plot_ls, plot_ctotal, plot_wue, ncol = 3)
library(zoo)
library(anytime)
library(ggplot2)
library(viridis)
library(dplyr)
library(tidyr)
library(scales)
df_1y <- read.csv("/home/bianca/bianca/CAETE-DVM-alloc-allom/scripts/yearly_mean_tables/MAN_30prec_1y_yearly.csv")
df_1y$frequency = "1y"
df_7y <- read.csv("/home/bianca/bianca/CAETE-DVM-alloc-allom/scripts/yearly_mean_tables/MAN_30prec_7y_yearly.csv")
df_7y$frequency = "7y"
df_regclim <- read.csv("/home/bianca/bianca/CAETE-DVM-alloc-allom/scripts/yearly_mean_tables/MAN_regularclimate_yearly.csv")
df_regclim$frequency = "regclim"
# df_combined <- rbind(df_1y, df_3y, df_5y, df_7y, df_regclim)
df_combined <- rbind(df_1y, df_7y, df_regclim)
# Converta a coluna "frequency" para o tipo fator
df_combined$frequency <- as.factor(df_combined$frequency)
head(df_combined)
## Definição das cores para cada categoria
cores <- c("1y" = "lightsalmon2",
"7y" = "seagreen4",
"regclim" = "steelblue3")
# Lista das variáveis que deseja plotar
# variaveis <- c("npp", "ctotal", "evapm", "wue", "ls")
variaveis <- c("cleaf", "cwood", "croot", "csap", "cheart", "csto")
# Plot das séries temporais para cada variável
df_combined %>%
pivot_longer(cols = all_of(variaveis)) %>%
ggplot(aes(x = date, y = value, color = frequency)) +
geom_line() +
scale_color_manual(values = cores) +  # Aplicando as cores específicas
labs(title = "",
x = "",
y = "") +
theme_minimal() +
facet_wrap(~name, nrow = 2, ncol = 3, scales = "free_y",
drop = TRUE,   # Remove subplots vazios
labeller = labeller(name = c("npp" = "NPP",
"ctotal" = "Total carbon",
"evapm" = "Evapotranspiration",
"wue" = "Water use efficiency",
"ls" = "N. of surviving strategies")))
# Plot das séries temporais para cada variável
df_combined %>%
pivot_longer(cols = all_of(variaveis)) %>%
ggplot(aes(x = date, y = value, color = frequency)) +
geom_line() +
scale_color_manual(values = cores) +  # Aplicando as cores específicas
labs(title = "",
x = "",
y = "") +
theme_minimal() +
facet_wrap(~name, nrow = 2, ncol = 3, scales = "free_y",
drop = TRUE)#,   # Remove subplots vazios
#normalizado:
library(ggplot2)
library(tidyr)
library(dplyr)
# Definição das cores para cada categoria
cores <- c("1y" = "lightsalmon2",
"7y" = "seagreen4",
"regclim" = "steelblue3")
# Lista das variáveis que deseja plotar
variaveis <- c("npp", "ctotal", "evapm", "wue", "csto", "cleaf", "croot", "cheart", "csto", "csap", "cwood")
# Normalização dos dados para o intervalo de 0 a 1
normalize_0_1 <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
# Aplicar a função de normalização às variáveis desejadas
df_normalized <- df_combined %>%
mutate(across(all_of(variaveis), normalize_0_1))
# Definição das cores para cada categoria
cores <- c("1y" = "lightsalmon2",
"7y" = "seagreen4",
"regclim" = "steelblue3")
# Lista das variáveis que deseja plotar
variaveis <- c("npp", "ctotal", "evapm", "wue", "csto", "cleaf", "croot")
# Normalização dos dados para o intervalo de 0 a 1
normalize_0_1 <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
# Aplicar a função de normalização às variáveis desejadas
df_normalized <- df_combined %>%
mutate(across(all_of(variaveis), normalize_0_1))
# Criar e exibir cada plot separadamente
for (var in variaveis) {
plot <- ggplot(data = df_normalized, aes(x = date, y = !!sym(var), color = frequency)) +
geom_line(size=1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 18) +  # Define o tamanho da fonte
theme_minimal() +
theme(
axis.title = element_text(size = 18),  # Tamanho da fonte dos rótulos dos eixos
axis.text = element_text(size = 16),   # Tamanho da fonte dos números dos eixos
plot.title = element_text(size = 22),  # Tamanho da fonte do título do gráfico
legend.position = "none")  # Remover a legenda
print(plot)
}
# Criar e exibir cada plot separadamente
for (var in variaveis) {
plot <- ggplot(data = df_normalized, aes(x = date, y = !!sym(var), color = frequency)) +
geom_line(size=1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 18) +  # Define o tamanho da fonte
theme_minimal() +
theme(
axis.title = element_text(size = 18),  # Tamanho da fonte dos rótulos dos eixos
axis.text = element_text(size = 16),   # Tamanho da fonte dos números dos eixos
plot.title = element_text(size = 22),  # Tamanho da fonte do título do gráfico
legend.position = "none") +  # Remover a legenda
ggtitle(paste("Variável:", var))  # Adiciona o título com o nome da variável
print(plot)
}
# Criar e exibir cada plot separadamente
for (var in variaveis) {
plot <- ggplot(data = df_normalized, aes(x = date, y = !!sym(var), color = frequency)) +
geom_line(size=1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 18) +  # Define o tamanho da fonte
theme_minimal() +
theme(
axis.title = element_text(size = 18),  # Tamanho da fonte dos rótulos dos eixos
axis.text = element_text(size = 16),   # Tamanho da fonte dos números dos eixos
plot.title = element_text(size = 22),  # Tamanho da fonte do título do gráfico
legend.position = "none") +  # Remover a legenda
ggtitle(paste("Variável:", var))  # Adiciona o título com o nome da variável
print(plot)
}
# Lista das variáveis que deseja plotar
variaveis <- c("npp", "ctotal", "evapm", "wue", "csto", "cleaf", "croot", "cheart", "csto", "csap", "cwood", "gpp")
# Normalização dos dados para o intervalo de 0 a 1
normalize_0_1 <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
# Aplicar a função de normalização às variáveis desejadas
df_normalized <- df_combined %>%
mutate(across(all_of(variaveis), normalize_0_1))
# Definição das cores para cada categoria
cores <- c("1y" = "lightsalmon2",
"7y" = "seagreen4",
"regclim" = "steelblue3")
# Lista das variáveis que deseja plotar
variaveis <- c("npp", "ctotal", "evapm", "wue", "csto", "cleaf", "croot")
# Normalização dos dados para o intervalo de 0 a 1
normalize_0_1 <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
# Aplicar a função de normalização às variáveis desejadas
df_normalized <- df_combined %>%
mutate(across(all_of(variaveis), normalize_0_1))
# Criar e exibir cada plot separadamente
for (var in variaveis) {
plot <- ggplot(data = df_normalized, aes(x = date, y = !!sym(var), color = frequency)) +
geom_line(size=1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 18) +  # Define o tamanho da fonte
theme_minimal() +
theme(
axis.title = element_text(size = 18),  # Tamanho da fonte dos rótulos dos eixos
axis.text = element_text(size = 16),   # Tamanho da fonte dos números dos eixos
plot.title = element_text(size = 22),  # Tamanho da fonte do título do gráfico
legend.position = "none")  # Remover a legenda
print(plot)
}
# Criar e exibir cada plot separadamente
for (var in variaveis) {
plot <- ggplot(data = df_normalized, aes(x = date, y = !!sym(var), color = frequency)) +
geom_line(size=1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 18) +  # Define o tamanho da fonte
theme_minimal() +
theme(
axis.title = element_text(size = 18),  # Tamanho da fonte dos rótulos dos eixos
axis.text = element_text(size = 16),   # Tamanho da fonte dos números dos eixos
plot.title = element_text(size = 22),  # Tamanho da fonte do título do gráfico
legend.position = "none") +  # Remover a legenda
ggtitle(paste("Variável:", var))  # Adiciona o título com o nome da variável
print(plot)
}
# Lista das variáveis que deseja plotar
variaveis <- c("npp", "ctotal", "evapm", "wue", "csto", "cleaf", "croot", "cheart", "csto", "csap", "cwood", "gpp")
# Normalização dos dados para o intervalo de 0 a 1
normalize_0_1 <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
# Aplicar a função de normalização às variáveis desejadas
df_normalized <- df_combined %>%
mutate(across(all_of(variaveis), normalize_0_1))
# Aplicar a função de normalização às variáveis desejadas
df_normalized <- df_combined %>%
mutate(across(all_of(variaveis), normalize_0_1))
# Criar e exibir cada plot separadamente
for (var in variaveis) {
plot <- ggplot(data = df_normalized, aes(x = date, y = !!sym(var), color = frequency)) +
geom_line(size=1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 18) +  # Define o tamanho da fonte
theme_minimal() +
theme(
axis.title = element_text(size = 18),  # Tamanho da fonte dos rótulos dos eixos
axis.text = element_text(size = 16),   # Tamanho da fonte dos números dos eixos
plot.title = element_text(size = 22),  # Tamanho da fonte do título do gráfico
legend.position = "none")  # Remover a legenda
print(plot)
}
head(df_combined)
# Lista das variáveis que deseja plotar
variaveis <- c("npp", "ctotal", "evapm", "wue", "csto", "cleaf", "croot", "cheart", "csto", "csap", "cwood", "photo")
# Normalização dos dados para o intervalo de 0 a 1
normalize_0_1 <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
# Aplicar a função de normalização às variáveis desejadas
df_normalized <- df_combined %>%
mutate(across(all_of(variaveis), normalize_0_1))
# Definição das cores para cada categoria
cores <- c("1y" = "lightsalmon2",
"7y" = "seagreen4",
"regclim" = "steelblue3")
# Normalização dos dados para o intervalo de 0 a 1
normalize_0_1 <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
# Aplicar a função de normalização às variáveis desejadas
df_normalized <- df_combined %>%
mutate(across(all_of(variaveis), normalize_0_1))
# Criar e exibir cada plot separadamente
for (var in variaveis) {
plot <- ggplot(data = df_normalized, aes(x = date, y = !!sym(var), color = frequency)) +
geom_line(size=1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 18) +  # Define o tamanho da fonte
theme_minimal() +
theme(
axis.title = element_text(size = 18),  # Tamanho da fonte dos rótulos dos eixos
axis.text = element_text(size = 16),   # Tamanho da fonte dos números dos eixos
plot.title = element_text(size = 22),  # Tamanho da fonte do título do gráfico
legend.position = "none")  # Remover a legenda
print(plot)
}
# Criar e exibir cada plot separadamente
for (var in variaveis) {
plot <- ggplot(data = df_normalized, aes(x = date, y = !!sym(var), color = frequency)) +
geom_line(size=1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 18) +  # Define o tamanho da fonte
theme_minimal() +
theme(
axis.title = element_text(size = 18),  # Tamanho da fonte dos rótulos dos eixos
axis.text = element_text(size = 16),   # Tamanho da fonte dos números dos eixos
plot.title = element_text(size = 22),  # Tamanho da fonte do título do gráfico
legend.position = "none") +  # Remover a legenda
ggtitle(paste("Variável:", var))  # Adiciona o título com o nome da variável
print(plot)
}
plot <- ggplot(data = df_normalized, aes(x = date, y = !!sym(var), color = frequency)) +
geom_line(size=1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 18) +  # Define o tamanho da fonte
theme_minimal() +
theme(
axis.title = element_text(size = 18),  # Tamanho da fonte dos rótulos dos eixos
axis.text = element_text(size = 16),   # Tamanho da fonte dos números dos eixos
plot.title = element_text(size = 22),  # Tamanho da fonte do título do gráfico
legend.position = "none") +  # Remover a legenda
ggtitle(paste(var))  # Adiciona o título com o nome da variável
print(plot)
# Criar e exibir cada plot separadamente
for (var in variaveis) {
plot <- ggplot(data = df_normalized, aes(x = date, y = !!sym(var), color = frequency)) +
geom_line(size=1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 18) +  # Define o tamanho da fonte
theme_minimal() +
theme(
axis.title = element_text(size = 18),  # Tamanho da fonte dos rótulos dos eixos
axis.text = element_text(size = 16),   # Tamanho da fonte dos números dos eixos
plot.title = element_text(size = 22),  # Tamanho da fonte do título do gráfico
legend.position = "none") +  # Remover a legenda
ggtitle(paste(var))  # Adiciona o título com o nome da variável
print(plot)
}
