axis.title = element_text(size = 14),  # Tamanho da fonte dos rótulos dos eixos
axis.text = element_text(size = 12),   # Tamanho da fonte dos números dos eixos
plot.title = element_text(size = 18)) +  # Tamanho da fonte do título do gráfico
ylim(0, max_y) +  # Definir os limites do eixo y
# Adicionando o segundo eixo y com a mesma escala
scale_y_continuous(sec.axis = sec_axis(~ ., breaks = c(0, max_y), name = NULL))
print(plot)
}
# Criar e exibir cada plot separadamente
for (var in variaveis) {
plot <- ggplot(data = df_normalized, aes(x = date, y = !!sym(var), color = frequency)) +
geom_line(size=1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 19) +  # Define o tamanho da fonte
theme_minimal() +
theme(
axis.title = element_text(size = 17),  # Tamanho da fonte dos rótulos dos eixos
axis.text = element_text(size = 15),   # Tamanho da fonte dos números dos eixos
plot.title = element_text(size = 21),  # Tamanho da fonte do título do gráfico
legend.position = "none")  # Remover a legenda
print(plot)
}
library(cowplot)
# Função para criar cada gráfico individualmente
create_plot <- function(var) {
ggplot(data = df_normalized, aes(x = date, y = !!sym(var), color = frequency)) +
geom_line(size = 1.5) +  # Ajuste o tamanho das linhas aqui
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 16) +  # Define o tamanho da fonte
theme_minimal() +
theme(
axis.title = element_text(size = 14),  # Tamanho da fonte dos rótulos dos eixos
axis.text = element_text(size = 12),   # Tamanho da fonte dos números dos eixos
plot.title = element_text(size = 18))
}
# Criar os plots individualmente
plot_npp <- create_plot("npp")
plot_ctotal <- create_plot("ctotal")
# Ajustar os limites dos eixos y
max_y <- max(df_normalized[, variaveis], na.rm = TRUE)
plot_npp <- plot_npp + ylim(0, max_y)
plot_ctotal <- plot_ctotal + ylim(0, max_y)
# Alinhar os gráficos lado a lado
aligned_plots <- plot_grid(plot_npp, plot_ctotal, align = "h", ncol = 2)
# Exibir os gráficos
print(aligned_plots)
# Criar e exibir cada plot separadamente
for (var in variaveis) {
plot <- ggplot(data = df_normalized, aes(x = date, y = !!sym(var), color = frequency)) +
geom_line(size = 1.5) +  # Ajuste o tamanho das linhas aqui
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 16) +  # Define o tamanho da fonte
theme_minimal() +
theme(
axis.title = element_text(size = 14),  # Tamanho da fonte dos rótulos dos eixos
axis.text = element_text(size = 12),   # Tamanho da fonte dos números dos eixos
plot.title = element_text(size = 18)) +  # Tamanho da fonte do título do gráfico
scale_y_continuous(sec.axis = sec_axis(~ . * -1, name = "Second axis"))  # Adicionar segundo eixo y espelhado
print(plot)
}
# Criar e exibir cada plot separadamente
for (var in variaveis) {
plot <- ggplot(data = df_normalized, aes(x = date, y = !!sym(var), color = frequency)) +
geom_line(size = 1.5) +  # Ajuste o tamanho das linhas aqui
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 16) +  # Define o tamanho da fonte
theme_minimal() +
theme(
axis.title = element_text(size = 14),  # Tamanho da fonte dos rótulos dos eixos
axis.text = element_text(size = 12),   # Tamanho da fonte dos números dos eixos
plot.title = element_text(size = 18)) +  # Tamanho da fonte do título do gráfico
scale_y_continuous(sec.axis = sec_axis(~ . * 1, name = "Second axis"))  # Adicionar segundo eixo y espelhado
print(plot)
}
# Criar e exibir cada plot separadamente
for (var in variaveis) {
plot <- ggplot(data = df_normalized, aes(x = date, y = !!sym(var), color = frequency)) +
geom_line(size=1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 19) +  # Define o tamanho da fonte
theme_minimal() +
theme(
axis.title = element_text(size = 17),  # Tamanho da fonte dos rótulos dos eixos
axis.text = element_text(size = 15),   # Tamanho da fonte dos números dos eixos
plot.title = element_text(size = 21),  # Tamanho da fonte do título do gráfico
legend.position = "none")  # Remover a legenda
print(plot)
}
# Criar e exibir cada plot separadamente
for (var in variaveis) {
plot <- ggplot(data = df_normalized, aes(x = date, y = !!sym(var), color = frequency)) +
geom_line(size=1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 20) +  # Define o tamanho da fonte
theme_minimal() +
theme(
axis.title = element_text(size = 18),  # Tamanho da fonte dos rótulos dos eixos
axis.text = element_text(size = 16),   # Tamanho da fonte dos números dos eixos
plot.title = element_text(size = 22),  # Tamanho da fonte do título do gráfico
legend.position = "none")  # Remover a legenda
print(plot)
}
library(gridExtra)
# Criar cada plot separadamente
plot_npp <- ggplot(data = df_normalized, aes(x = date, y = npp, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized NPP",
size = 20) +
theme_minimal() +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
plot_ctotal <- ggplot(data = df_normalized, aes(x = date, y = ctotal, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized Ctotal",
size = 20) +
theme_minimal() +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
plot_evapm <- ggplot(data = df_normalized, aes(x = date, y = evapm, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized Evapm",
size = 20) +
theme_minimal() +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
plot_wue <- ggplot(data = df_normalized, aes(x = date, y = wue, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized WUE",
size = 20) +
theme_minimal() +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_ctotal, plot_evapm, plot_wue, ncol = 2)
plot <- ggplot(data = df_normalized, aes(x = date, y = !!sym(var), color = frequency)) +
geom_line(size=1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 18) +  # Define o tamanho da fonte
theme_minimal() +
theme(
axis.title = element_text(size = 18),  # Tamanho da fonte dos rótulos dos eixos
axis.text = element_text(size = 16),   # Tamanho da fonte dos números dos eixos
plot.title = element_text(size = 22),  # Tamanho da fonte do título do gráfico
legend.position = "none")  # Remover a legenda
library(gridExtra)
# Criar cada plot separadamente
plot_npp <- ggplot(data = df_normalized, aes(x = date, y = npp, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized NPP",
size = 18) +
theme_minimal() +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
plot_ctotal <- ggplot(data = df_normalized, aes(x = date, y = ctotal, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized Ctotal",
size = 18) +
theme_minimal() +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
plot_evapm <- ggplot(data = df_normalized, aes(x = date, y = evapm, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized Evapm",
size = 18) +
theme_minimal() +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
plot_wue <- ggplot(data = df_normalized, aes(x = date, y = wue, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized WUE",
size = 18) +
theme_minimal() +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_ctotal, plot_evapm, plot_wue, ncol = 2)
# Criar cada plot separadamente
plot_npp <- ggplot(data = df_normalized, aes(x = date, y = npp, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized NPP",
size = 16) +
theme_minimal() +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
plot_ctotal <- ggplot(data = df_normalized, aes(x = date, y = ctotal, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized Ctotal",
size = 16) +
theme_minimal() +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
plot_evapm <- ggplot(data = df_normalized, aes(x = date, y = evapm, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized Evapm",
size = 16) +
theme_minimal() +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
plot_wue <- ggplot(data = df_normalized, aes(x = date, y = wue, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized WUE",
size = 16) +
theme_minimal() +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_ctotal, plot_evapm, plot_wue, ncol = 2)
plot_evapm <- ggplot(data = df_normalized, aes(x = date, y = evapm, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized Evapm",
size = 14) +
theme_minimal() +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
plot_wue <- ggplot(data = df_normalized, aes(x = date, y = wue, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized WUE",
size = 16) +
theme_minimal() +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_ctotal, plot_evapm, plot_wue, ncol = 2)
plot_wue <- ggplot(data = df_normalized, aes(x = date, y = wue, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized WUE",
size = 16) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_ctotal, plot_evapm, plot_wue, ncol = 2)
# Criar cada plot separadamente
plot_npp <- ggplot(data = df_normalized, aes(x = date, y = npp, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized NPP",
size = 16) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
plot_ctotal <- ggplot(data = df_normalized, aes(x = date, y = ctotal, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized Ctotal",
size = 16) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
plot_evapm <- ggplot(data = df_normalized, aes(x = date, y = evapm, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized Evapm",
size = 14) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
plot_wue <- ggplot(data = df_normalized, aes(x = date, y = wue, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized WUE",
size = 16) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_ctotal, plot_evapm, plot_wue, ncol = 2)
# Criar cada plot separadamente
plot_npp <- ggplot(data = df_normalized, aes(x = date, y = npp, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 16) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
plot_ctotal <- ggplot(data = df_normalized, aes(x = date, y = ctotal, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 16) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
plot_evapm <- ggplot(data = df_normalized, aes(x = date, y = evapm, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 14) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
plot_wue <- ggplot(data = df_normalized, aes(x = date, y = wue, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Normalized value",
size = 16) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_ctotal, plot_evapm, plot_wue, ncol = 2)
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_evapm, plot_ctotal, plot_wue, ncol = 2)
library(gridExtra)
# Criar cada plot separadamente
plot_ls <- ggplot(data = df_combined, aes(x = date, y = ls, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "LS",
size = 20) +
theme_minimal() +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_ctotal, plot_evapm, plot_wue, plot_ls, ncol = 2)
# Criar cada plot separadamente
plot_ls <- ggplot(data = df_combined, aes(x = date, y = ls, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "",
size = 14) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_ctotal, plot_evapm, plot_wue, plot_ls, ncol = 2)
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_ctotal, plot_evapm, plot_wue, plot_ls, ncol = 3)
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_ctotal, plot_ls, plot_evapm, plot_wue, ncol = 3)
# Criar cada plot separadamente
plot_ls <- ggplot(data = df_combined, aes(x = date, y = ls, color = frequency)) +
geom_line(size = 1) +
scale_color_manual(values = cores) +
labs(
x = "Year",
y = "Surviving strategies",
size = 14) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.position = "none")
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_ctotal, plot_ls, plot_evapm, plot_wue, ncol = 3)
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_evapm, plot_ctotal, plot_ls, plot_wue, ncol = 3)
# Organizar os plots na sequência desejada
grid.arrange(plot_npp, plot_evapm, plot_ls, plot_ctotal, plot_wue, ncol = 3)
