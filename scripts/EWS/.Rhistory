library(bfast)
library(zoo)
# #           Manaus
# #-------------------------------
# ################################
#
# #-------------------------------
# #        regular climate
# #-------------------------------
#
# # !!!!! note this is the monthly integrated data frame!!!!!!!
# df_regclim <- read.csv("/home/amazonfaceme/biancarius/CAETE-DVM-alloc-allom/outputs/MAN/experiments/MAN_regularclimate/gridcell186-239/MAN_regularclimate_monthly.csv")
df_regclim <- read.csv("/home/bianca/bianca/CAETE-DVM-alloc-allom/scripts/monthly_mean_tables/MAN_regularclimate_monthly.csv")
# Criando objetos de série temporal para todas as colunas
time_series_list_regclim <- lapply(df_regclim[, -1], function(col) {
ts(col, start = c(1979, 1), frequency = 12)
})
# Atribuindo nomes às séries temporais
names(time_series_list_regclim) <- names(df_regclim[, -1])
# Executar bfast
# Executar bfast e plotar resultados
columns_to_process <- c("npp", "photo", "cleaf", "croot", "cwood", "cheart", "csap", "csto", "evapm", "ar")
for (col_name in columns_to_process) {
res_bfast_regclim <- bfast(time_series_list_regclim[[col_name]],
h = 0.25, max.iter = 1)
plot(res_bfast_regclim, main = col_name)
}
res_bfast_regclim
for (col_name in columns_to_process) {
res_bfast_regclim <- bfast(time_series_list_regclim[[col_name]],
h = 0.25, max.iter = 1)
res_bfast_regclim
plot(res_bfast_regclim, main = col_name)
}
for (col_name in columns_to_process) {
res_bfast_regclim <- bfast(time_series_list_regclim[[col_name]],
h = 0.25, max.iter = 1)
print(res_bfast_regclim)
plot(res_bfast_regclim, main = col_name)
}
bfast_res_list_regclim[[col_name]] <- res_bfast_regclim
bfast_res_list_regclim <- list()
# Executar bfast
# Executar bfast e plotar resultados
columns_to_process <- c("npp", "photo", "cleaf", "croot", "cwood", "cheart", "csap", "csto", "evapm", "ar")
for (col_name in columns_to_process) {
res_bfast_regclim <- bfast(time_series_list_regclim[[col_name]],
h = 0.25, max.iter = 1)
bfast_res_list_regclim[[col_name]] <- res_bfast_regclim
print(res_bfast_regclim)
plot(res_bfast_regclim, main = col_name)
}
bfast_res_list_regclim
# #    30% prec reduction
# #-------------------------------
# #-------------------------------
#
# #-------------------------------
# #           1y freq
# #-------------------------------
#
# # Manaus - 30% prec reduction - 1 year frequency application
# # !!!!! note this is the monthly integrated data frame!!!!!!!
df_1y <- read.csv("/home/bianca/bianca/CAETE-DVM-alloc-allom/scripts/monthly_mean_tables/MAN_30prec_1y_monthly.csv")
# Criando objetos de série temporal para todas as colunas
time_series_list_1y <- lapply(df_1y[, -1], function(col) {
ts(col, start = c(1979, 1), frequency = 12)
})
# #    30% prec reduction
# #-------------------------------
# #-------------------------------
#
# #-------------------------------
# #           1y freq
# #-------------------------------
#
# # Manaus - 30% prec reduction - 1 year frequency application
# # !!!!! note this is the monthly integrated data frame!!!!!!!
df_1y <- read.csv("/home/bianca/bianca/CAETE-DVM-alloc-allom/scripts/monthly_mean_tables/MAN_30prec_1y_monthly.csv")
# Criando objetos de série temporal para todas as colunas
time_series_list_1y <- lapply(df_1y[, -1], function(col) {
ts(col, start = c(1979, 1), frequency = 12)
})
# Atribuindo nomes às séries temporais
names(time_series_list_1y) <- names(df_1y[, -1])
bfast_res_list_1y <- list()
# Executar bfast
# Executar bfast e plotar resultados
columns_to_process <- c("npp", "photo", "cleaf", "croot", "cwood", "cheart", "csap", "csto", "evapm", "ar")
for (col_name in columns_to_process) {
res_bfast_1y <- bfast(time_series_list_1y[[col_name]],
h = 0.25, max.iter = 1)
bfast_res_list_1y[[col_name]] <- res_bfast_1y
plot(res_bfast_1y, main = col_name)
}
bfast_res_list_1y
bfast_res_list_1y$croot
bfast_res_list_1y$cwood
bfast_res_list_1y$cheart
bfast_res_list_1y$csap
bfast_res_list_1y$csto
bfast_res_list_1y$evapm
bfast_res_list_1y$ar
bfast_res_list_3y <- list()
# plot(res_bfast, main = "NPP\n-30% prec  1year freq", ylab = "NPP", xlab = "Time")
# # dev.off()
#
# #-------------------------------
# #           3y freq
# #-------------------------------
#
# # Manaus - 30% prec reduction - 3 year frequency application
# # !!!!! note this is the monthly integrated data frame!!!!!!!
# df_3y <- read.csv("/home/amazonfaceme/biancarius/CAETE-DVM-alloc-allom/outputs/MAN/experiments/30perc_reduction/MAN_30prec_3y/gridcell186-239/MAN_30prec_3y_monthly.csv")
df_3y <- read.csv("/home/bianca/bianca/CAETE-DVM-alloc-allom/scripts/monthly_mean_tables/MAN_30prec_3y_monthly.csv")
# Criando objetos de série temporal para todas as colunas
time_series_list_3y <- lapply(df_3y[, -1], function(col) {
ts(col, start = c(1979, 1), frequency = 12)
})
# Atribuindo nomes às séries temporais
names(time_series_list_3y) <- names(df_3y[, -1])
bfast_res_list_3y <- list()
# Executar bfast
# Executar bfast e plotar resultados
columns_to_process <- c("npp", "photo", "cleaf", "croot", "cwood", "cheart", "csap", "csto", "evapm", "ar")
for (col_name in columns_to_process) {
res_bfast_3y <- bfast(time_series_list_3y[[col_name]],
h = 0.25, max.iter = 1)
bfast_res_list_3y[[col_name]] <- res_bfast_3y
plot(res_bfast_3y, main = col_name)
}
bfast_res_list_3y
bfast_res_list_3y$npp
bfast_res_list_3y$photo
bfast_res_list_3y$cleaf
bfast_res_list_3y$croot
bfast_res_list_3y$cwood
bfast_res_list_3y$cheart
bfast_res_list_3y$csap
bfast_res_list_3y$csto
bfast_res_list_3y$evapm
bfast_res_list_3y$ar
# # dev.off()
#
# #-------------------------------
# #           5y freq
# #-------------------------------
#
#
# # Manaus - 30% prec reduction - 3 year frequency application
# # !!!!! note this is the monthly integrated data frame!!!!!!!
# # df_5y <- read.csv("/home/amazonfaceme/biancarius/CAETE-DVM-alloc-allom/outputs/MAN/experiments/30perc_reduction/MAN_30prec_5y/gridcell186-239/MAN_30prec_5y_monthly.csv")
df_5y <- read.csv("/home/bianca/bianca/CAETE-DVM-alloc-allom/scripts/monthly_mean_tables/MAN_30prec_5y_monthly.csv")
# Criando objetos de série temporal para todas as colunas
time_series_list_5y <- lapply(df_5y[, -1], function(col) {
ts(col, start = c(1979, 1), frequency = 12)
})
# Atribuindo nomes às séries temporais
names(time_series_list_5y) <- names(df_5y[, -1])
bfast_res_list_5y <- list()
# Executar bfast
# Executar bfast e plotar resultados
columns_to_process <- c("npp", "photo", "cleaf", "croot", "cwood", "cheart", "csap", "csto", "evapm", "ar")
for (col_name in columns_to_process) {
res_bfast_5y <- bfast(time_series_list_5y[[col_name]],
h = 0.25, max.iter = 1)
bfast_res_list_5y[[col_name]] <- res_bfast_5y
plot(res_bfast_5y, main = col_name)
}
bfast_res_list_5y$npp
bfast_res_list_5y$photo
bfast_res_list_5y$cleaf
bfast_res_list_5y$croot
bfast_res_list_5y$cwood
bfast_res_list_5y$cheart
bfast_res_list_5y$csap
bfast_res_list_5y$csto
bfast_res_list_5y$evapm
bfast_res_list_5y$ar
# # dev.off()
#
# #-------------------------------
# #           7y freq
# #-------------------------------
#
#
# # Manaus - 30% prec reduction - 7 year frequency application
# # !!!!! note this is the monthly integrated data frame!!!!!!!
# # df_7y <- read.csv("/home/amazonfaceme/biancarius/CAETE-DVM-alloc-allom/outputs/MAN/experiments/30perc_reduction/MAN_30prec_7y/gridcell186-239/MAN_30prec_7y_monthly.csv")
df_7y <- read.csv("/home/bianca/bianca/CAETE-DVM-alloc-allom/scripts/monthly_mean_tables/MAN_30prec_7y_monthly.csv")
# Criando objetos de série temporal para todas as colunas
time_series_list_7y <- lapply(df_7y[, -1], function(col) {
ts(col, start = c(1979, 1), frequency = 12)
})
# Atribuindo nomes às séries temporais
names(time_series_list_7y) <- names(df_7y[, -1])
bfast_res_list_7y<- list()
# Executar bfast
# Executar bfast e plotar resultados
columns_to_process <- c("npp", "photo", "cleaf", "croot", "cwood", "cheart", "csap", "csto", "evapm", "ar")
for (col_name in columns_to_process) {
res_bfast_7y <- bfast(time_series_list_7y[[col_name]],
h = 0.25, max.iter = 1)
bfast_res_list_7y[[col_name]] <- res_bfast_7y
plot(res_bfast_7y, main = col_name)
}
bfast_res_list_7y
bfast_res_list_7y$npp
bfast_res_list_7y$photo
bfast_res_list_7y$cleaf
bfast_res_list_7y$croot
bfast_res_list_7y$cwood
bfast_res_list_7y$cheart
bfast_res_list_7y$csap
bfast_res_list_7y$csto
bfast_res_list_7y$evapm
bfast_res_list_7y$ar
df = read.csv('/home/bianca/bianca/CAETE-DVM-alloc-allom/scripts/EWS/csv_allvar/ews_results_1y_ar.csv')
df$timeindex
if (df$timeindex[1] != 1){
print('time index é 1')
else{
if (df$timeindex[1] != 1){
print('time index é 1')
}
if (df$timeindex[1] != 1){
print('time index n é 1')
}
else{
if (df$timeindex[1] != 1){
print('time index n é 1')
}else{
print('time index  é 1')
}
if (df$timeindex[1] != 1){
print('time index n é 1')
additional_rows <- data.frame(
timeindex = seq(1, result$timeindex[1] - 1),
ar1 = rep(NA, result$timeindex[1] - 1),
ws = rep(result$ws[1], result$timeindex[1] - 1)
)
}else{
print('time index  é 1')
}
if (df$timeindex[1] != 1){
print('time index n é 1')
additional_rows <- data.frame(
timeindex = seq(1, df$timeindex[1] - 1),
ar1 = rep(NA, df$timeindex[1] - 1),
ws = rep(df$ws[1], result$timeindex[1] - 1)
)
}else{
print('time index  é 1')
}
if (df$timeindex[1] != 1){
print('time index n é 1')
additional_rows <- data.frame(
timeindex = seq(1, df$timeindex[1] - 1),
ar1 = rep(NA, df$timeindex[1] - 1),
ws = rep(df$ws[1], df$timeindex[1] - 1)
)
}else{
print('time index  é 1')
}
result = read.csv('/home/bianca/bianca/CAETE-DVM-alloc-allom/scripts/EWS/csv_allvar/ews_results_1y_ar.csv')
if (result$timeindex[1] != 1){
print('time index n é 1')
additional_rows <- data.frame(
timeindex = seq(1, result$timeindex[1] - 1),
ar1 = rep(NA, result$timeindex[1] - 1),
ws = rep(result$ws[1], result$timeindex[1] - 1)
)
return(bind_rows(additional_rows, result))
}else{
print('time index  é 1')
}
if (result$timeindex[1] != 1){
print('time index n é 1')
additional_rows <- data.frame(
timeindex = seq(1, result$timeindex[1] - 1),
ar1 = rep(NA, result$timeindex[1] - 1),
ws = rep(result$ws[1], result$timeindex[1] - 1)
)
res = bind_rows(additional_rows, result)
}else{
print('time index  é 1')
}
result <- read.csv('/home/bianca/bianca/CAETE-DVM-alloc-allom/scripts/EWS/csv_allvar/ews_results_1y_ar.csv')
if (result$timeindex[1] != 1) {
print('O índice de tempo não é 1')
additional_rows <- data.frame(
timeindex = seq(1, result$timeindex[1] - 1),
ar1 = rep(NA, result$timeindex[1] - 1),
ws = rep(result$ws[1], result$timeindex[1] - 1)
)
result <- bind_rows(additional_rows, result)
} else {
print('O índice de tempo é 1')
}
if (result$timeindex[1] != 1) {
print('O índice de tempo não é 1')
additional_rows <- data.frame(
timeindex = seq(1, result$timeindex[1] - 1),
ar1 = rep(NA, result$timeindex[1] - 1),
)
result <- bind_rows(additional_rows, result)
} else {
print('O índice de tempo é 1')
}
r <- bind_rows(additional_rows, result)
library(earlywarnings)
library(ggplot2)
library(dplyr)
library(tidyr)
if (result$timeindex[1] != 1) {
print('O índice de tempo não é 1')
additional_rows <- data.frame(
timeindex = seq(1, result$timeindex[1] - 1),
ar1 = rep(NA, result$timeindex[1] - 1),
ws = rep(result$ws[1], result$timeindex[1] - 1)
)
r <- bind_rows(additional_rows, result)
} else {
print('O índice de tempo é 1')
}
if (result$timeindex[1] != 1) {
print('O índice de tempo não é 1')
additional_rows <- data.frame(
timeindex = seq(1, result$timeindex[1] - 1),
ar1 = rep(NA, result$timeindex[1] - 1),
)
r <- bind_rows(additional_rows, result)
} else {
print('O índice de tempo é 1')
}
if (result$timeindex[1] != 1) {
print('O índice de tempo não é 1')
additional_rows <- data.frame(
timeindex = seq(1, result$timeindex[1] - 1),
ar1 = rep(NA, result$timeindex[1] - 1)
)
r <- bind_rows(additional_rows, result)
} else {
print('O índice de tempo é 1')
}
r
if (result$timeindex[1] != 1) {
print('O índice de tempo não é 1')
additional_rows <- data.frame(
timeindex = seq(1, result$timeindex[1] - 1),
ar1 = rep(NA, result$timeindex[1] - 1),
var = rep(result$var[1], result$timeindex[1] - 1)
)
r <- bind_rows(additional_rows, result)
} else {
print('O índice de tempo é 1')
}
r
if (result$timeindex[1] != 1) {
print('O índice de tempo não é 1')
additional_rows <- data.frame(
timeindex = seq(1, result$timeindex[1] - 1),
ar1 = rep(NA, result$timeindex[1] - 1),
var = rep(result$var[1], result$timeindex[1] - 1),
frequency = rep(result$frequency[1], result$timeindex[1] - 1)
)
r <- bind_rows(additional_rows, result)
} else {
print('O índice de tempo é 1')
}
r
library(earlywarnings)
library(ggplot2)
library(dplyr)
library(tidyr)
output_path = "/home/bianca/bianca/CAETE-DVM-alloc-allom/scripts/EWS/csv_allvar/"
#----------------------------------------------
#               MANAUS
#----------------------------------------------
#investigating EWS during the whole time series
#----------------------------------------------
#   precipitation reduction: 30%
#   frequency: 1 year
#----------------------------------------------
# # !!!!! note this is the monthly integrated data frame!!!!!!!
df_1y <- read.csv("/home/bianca/bianca/CAETE-DVM-alloc-allom/scripts/monthly_mean_tables/MAN_30prec_1y_monthly.csv")
# Specify the columns to process
columns_to_process <- names(df_1y)[-1]
# Loop through each column and apply generic early warning signals
for (col_name in columns_to_process) {
ews_results <- generic_ews(df_1y[[col_name]],
winsize = 15, detrending = 'loess',
logtransform = FALSE, interpolate = FALSE,
AR_n = FALSE, powerspectrum = FALSE)
# Create a new data frame with the results
result_df <- data.frame(ews_results, var = col_name)
result_df$frequency = "1y"
# Save the result to a separate CSV file for each variable
write.csv(result_df, file = paste0(output_path, "ews_results_1y_", col_name, ".csv"), row.names = FALSE)
# Save the plot with the complement of the column name and specified path
# png(paste0(output_path, "ews_plot_", col_name, ".png"))
# plot(ews_results, main = col_name)
dev.off()
}
result <- read.csv('/home/bianca/bianca/CAETE-DVM-alloc-allom/scripts/EWS/csv_allvar/ews_results_1y_ar.csv')
#----------------------------------------------
#   precipitation reduction: 30%
#   frequency: 3 year
#----------------------------------------------
# # !!!!! note this is the monthly integrated data frame!!!!!!!
df_3y <- read.csv("/home/bianca/bianca/CAETE-DVM-alloc-allom/scripts/monthly_mean_tables/MAN_30prec_3y_monthly.csv")
# Specify the columns to process
columns_to_process <- names(df_3y)[-1]
# Loop through each column and apply generic early warning signals
for (col_name in columns_to_process) {
ews_results <- generic_ews(df_3y[[col_name]],
winsize = 15, detrending = 'loess',
logtransform = FALSE, interpolate = FALSE,
AR_n = FALSE, powerspectrum = FALSE)
# Create a new data frame with the results
result_df <- data.frame(ews_results, var = col_name)
result_df$frequency = "3y"
# Save the result to a separate CSV file for each variable
write.csv(result_df, file = paste0(output_path, "ews_results_3y_", col_name, ".csv"), row.names = FALSE)
# Save the plot with the complement of the column name and specified path
# png(paste0(output_path, "ews_plot_", col_name, ".png"))
# plot(ews_results, main = col_name)
dev.off()
}
#
# write.csv(df_1y_npp_gws, file =
#             "/home/bianca/bianca/CAETE-DVM-alloc-allom/scripts/MAN_30prec_3y_timeseries_ews.csv", row.names = FALSE)
#----------------------------------------------
#   precipitation reduction: 30%
#   frequency: 5 year
#----------------------------------------------
# # !!!!! note this is the monthly integrated data frame!!!!!!!
df_5y <- read.csv("/home/bianca/bianca/CAETE-DVM-alloc-allom/scripts/monthly_mean_tables/MAN_30prec_5y_monthly.csv")
# Specify the columns to process
columns_to_process <- names(df_5y)[-1]
# Loop through each column and apply generic early warning signals
for (col_name in columns_to_process) {
ews_results <- generic_ews(df_5y[[col_name]],
winsize = 15, detrending = 'loess',
logtransform = FALSE, interpolate = FALSE,
AR_n = FALSE, powerspectrum = FALSE)
# Create a new data frame with the results
result_df <- data.frame(ews_results, var = col_name)
result_df$frequency = "5y"
# Save the result to a separate CSV file for each variable
write.csv(result_df, file = paste0(output_path, "ews_results_5y_", col_name, ".csv"), row.names = FALSE)
# Save the plot with the complement of the column name and specified path
# png(paste0(output_path, "ews_plot_", col_name, ".png"))
# plot(ews_results, main = col_name)
dev.off()
}
#----------------------------------------------
#   precipitation reduction: 30%
#   frequency: 7 year
#----------------------------------------------
# # !!!!! note this is the monthly integrated data frame!!!!!!!
df_7y <- read.csv("/home/bianca/bianca/CAETE-DVM-alloc-allom/scripts/monthly_mean_tables/MAN_30prec_7y_monthly.csv")
# Specify the columns to process
columns_to_process <- names(df_7y)[-1]
# Loop through each column and apply generic early warning signals
for (col_name in columns_to_process) {
ews_results <- generic_ews(df_7y[[col_name]],
winsize = 15, detrending = 'loess',
logtransform = FALSE, interpolate = FALSE,
AR_n = FALSE, powerspectrum = FALSE)
# Create a new data frame with the results
result_df <- data.frame(ews_results, var = col_name)
result_df$frequency = "7y"
# Save the result to a separate CSV file for each variable
write.csv(result_df, file = paste0(output_path, "ews_results_7y_", col_name, ".csv"), row.names = FALSE)
# Save the plot with the complement of the column name and specified path
# png(paste0(output_path, "ews_plot_", col_name, ".png"))
# plot(ews_results, main = col_name)
dev.off()
}
#----------------------------------------------
#   precipitation reduction: regular climate
#   frequency: NA
#----------------------------------------------
# # !!!!! note this is the monthly integrated data frame!!!!!!!
# Read CSV file
df_regclim <- read.csv("/home/bianca/bianca/CAETE-DVM-alloc-allom/scripts/monthly_mean_tables/MAN_regularclimate_monthly.csv")
# Specify the columns to process
columns_to_process <- names(df_regclim)[-1]
# Loop through each column and apply generic early warning signals
for (col_name in columns_to_process) {
ews_results <- generic_ews(df_regclim[[col_name]],
winsize = 15, detrending = 'loess',
logtransform = FALSE, interpolate = FALSE,
AR_n = FALSE, powerspectrum = FALSE)
# Create a new data frame with the results
result_df <- data.frame(ews_results, var = col_name)
result_df$frequency = "regclim"
# Save the result to a separate CSV file for each variable
write.csv(result_df, file = paste0(output_path, "ews_results_regclim_", col_name, ".csv"), row.names = FALSE)
# Save the plot with the complement of the column name and specified path
# png(paste0(output_path, "ews_plot_", col_name, ".png"))
# plot(ews_results, main = col_name)
dev.off()
}
